<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Demo | Academic</title>
    <link>http://localhost:1313/category/demo/</link>
      <atom:link href="http://localhost:1313/category/demo/index.xml" rel="self" type="application/rss+xml" />
    <description>Demo</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sat, 16 Mar 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Demo</title>
      <link>http://localhost:1313/category/demo/</link>
    </image>
    
    <item>
      <title>Как прошла моя неделя?</title>
      <link>http://localhost:1313/post/this-week/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/this-week/</guid>
      <description>&lt;h2 id=&#34;понедельник&#34;&gt;Понедельник&lt;/h2&gt;
&lt;p&gt;Понедельник начался как обычно, я проснулся и отправился в ВУЗ на испанский. Там я встретил Аню и мы обсудили недавний Оскар. Остаток для прошёл как обычно.&lt;/p&gt;
&lt;h2 id=&#34;вторник&#34;&gt;Вторник&lt;/h2&gt;
&lt;p&gt;Далее шел вторник, который ассоциируется только с одним предметом - Физ. культурой. В этот раз мы снова катались на лыжах. Это был последний урок в лыжном сезоне.&lt;/p&gt;
&lt;h2 id=&#34;среда&#34;&gt;Среда&lt;/h2&gt;
&lt;p&gt;Среде же начилается почти раньше всех - В 7 утра, когда я полусонный иду на автбусную остановку, для того чтобы успеть на пару по технологии программирования.&lt;/p&gt;
&lt;h2 id=&#34;четверг&#34;&gt;Четверг&lt;/h2&gt;
&lt;p&gt;Главное событие четверга - Лекция по матанализу, на которых я с каждым разом понимаю всё меньше и меньше&lt;/p&gt;
&lt;h2 id=&#34;пятница&#34;&gt;Пятница&lt;/h2&gt;
&lt;p&gt;На самом деле конец недели для меня это четверг так как в пятницу и субботу у меня нет пар.&lt;/p&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;Это была самая обычная неделя.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Легковесные языки разметки.</title>
      <link>http://localhost:1313/post/git-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/git-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;h2 id=&#34;языки-разметки&#34;&gt;Языки разметки&lt;/h2&gt;
&lt;p&gt;Язы́к разме́тки (текста) в компьютерной терминологии — набор символов или последовательностей символов, вставляемых в текст для передачи информации о его отображении или строении. Принадлежит классу компьютерных языков. Текстовый документ, написанный с использованием языка разметки, содержит не только сам текст (как последовательность слов и знаков препинания), но и дополнительную информацию о различных его участках — например, указание на заголовки, выделения, списки и т. д. В более сложных случаях язык разметки позволяет вставлять в документ интерактивные элементы и содержание других документов.&lt;/p&gt;
&lt;h2 id=&#34;типы&#34;&gt;Типы&lt;/h2&gt;
&lt;p&gt;Легкие языки разметки можно разделить на категории по типам их тегов. Подобно HTML (полужирный), в некоторых языках используются именованные элементы, которые имеют общий формат для начальных и конечных тегов (например, BBCode [b] жирный [ / b]), тогда как правильные упрощенные языки разметки ограничены ASCII -только знаками препинания и другими небуквенными символами для тегов, но некоторые также смешивают оба стиля (например, Textile bq.) или разрешить встроенный HTML (например, Markdown ), возможно, расширенный пользовательскими элементами (например, MediaWiki source).&lt;/p&gt;
&lt;p&gt;Большинство языков различают разметку для строк или блоков и для более коротких отрезков текста, но некоторые поддерживают только встроенную разметку.&lt;/p&gt;
&lt;p&gt;Некоторые языки разметки предназначены для определенной цели, например, для документирования компьютерного кода (например, POD, RD ) или для преобразования в определенный выходной формат (обычно HTML) и ничего больше, другие более вообще в приложении. Сюда входит, ориентированы ли они на текстовое представление или на сериализацию данных.&lt;/p&gt;
&lt;p&gt;Языки, ориентированные на представление, включают AsciiDoc, atx, BBCode, креольский, Crossmark, Epytext, Haml, JsonML, MakeDoc, Markdown, Org-mode, POD, reST, RD, Setext, SiSU, SPIP, Xupl, Texy!, Текстиль, txt2tags, UDO и Wikitext.&lt;/p&gt;
&lt;p&gt;Языки, ориентированные на сериализацию данных, включают Curl (гомоиконный, но также читает JSON; каждый объект сериализуется), JSON и YAML.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Прошедшая неделя</title>
      <link>http://localhost:1313/post/last-week/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/last-week/</guid>
      <description>&lt;h2 id=&#34;понедельник&#34;&gt;Понедельник&lt;/h2&gt;
&lt;p&gt;Понедельник началася на удивление уникально, сразу после пар я пошёл гулять с одногруппницей. Было очень весело. Отличное начало недели!&lt;/p&gt;
&lt;h2 id=&#34;вторник&#34;&gt;Вторник&lt;/h2&gt;
&lt;p&gt;Однако вторник прошёл как обычно. Типичный урок физ-ры, только теперь на свежем воздухе! Так же этот день запомнился ожесточенной игрой в баскетбол.&lt;/p&gt;
&lt;h2 id=&#34;среда&#34;&gt;Среда&lt;/h2&gt;
&lt;p&gt;Среда же стала днем, когда обстановка начала началяться. Помимо мат. анализа, по которому надо было сделать дз, нужно было готовиться к 2 кр (ан.гем. и мат.лог)&lt;/p&gt;
&lt;h2 id=&#34;четверг&#34;&gt;Четверг&lt;/h2&gt;
&lt;p&gt;Четверг стал роковым днем, хоть и закончился довольно быстро. Контрольные на этой неделе закончились, так что можно расслабиться.&lt;/p&gt;
&lt;h2 id=&#34;пятница&#34;&gt;Пятница&lt;/h2&gt;
&lt;p&gt;На самом деле конец недели для меня это четверг так как в пятницу и субботу у меня нет пар.&lt;/p&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;Это была самая обычная неделя.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git.</title>
      <link>http://localhost:1313/post/git/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/git/</guid>
      <description>&lt;h2 id=&#34;о-системе-контроля-версий&#34;&gt;О системе контроля версий&lt;/h2&gt;
&lt;p&gt;Что такое «система контроля версий» и почему это важно? Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии. Для контроля версий файлов в этой книге в качестве примера будет использоваться исходный код программного обеспечения, хотя на самом деле вы можете использовать контроль версий практически для любых типов файлов.&lt;/p&gt;
&lt;p&gt;Если вы графический или web-дизайнер и хотите сохранить каждую версию изображения или макета (скорее всего, захотите), система контроля версий (далее VCS) — как раз то, что нужно. Она позволяет вернуть файлы к состоянию, в котором они были до изменений, вернуть проект к исходному состоянию, увидеть изменения, увидеть, кто последний менял что-то и вызвал проблему, кто поставил задачу и когда и многое другое. Использование VCS также значит в целом, что, если вы сломали что-то или потеряли файлы, вы спокойно можете всё исправить. В дополнение ко всему вы получите всё это без каких-либо дополнительных усилий.&lt;/p&gt;
&lt;h2 id=&#34;локальные-системы-контроля-версий&#34;&gt;Локальные системы контроля версий&lt;/h2&gt;
&lt;p&gt;Многие люди в качестве метода контроля версий применяют копирование файлов в отдельный каталог (возможно даже, каталог с отметкой по времени, если они достаточно сообразительны). Данный подход очень распространён из-за его простоты, однако он невероятно сильно подвержен появлению ошибок. Можно легко забыть в каком каталоге вы находитесь и случайно изменить не тот файл или скопировать не те файлы, которые вы хотели.&lt;/p&gt;
&lt;p&gt;Для того, чтобы решить эту проблему, программисты давным-давно разработали локальные VCS с простой базой данных, которая хранит записи о всех изменениях в файлах, осуществляя тем самым контроль ревизий.&lt;/p&gt;
&lt;h2 id=&#34;централизованные-системы-контроля-версий&#34;&gt;Централизованные системы контроля версий&lt;/h2&gt;
&lt;p&gt;Следующая серьёзная проблема, с которой сталкиваются люди, — это необходимость взаимодействовать с другими
разработчиками. Для того, чтобы разобраться с ней, были разработаны централизованные системы контроля версий
(Centralized Version Control System, далее CVCS). Такие системы, как CVS, Subversion и Perforce, используют
единственный сервер, содержащий все версии файлов, и некоторое количество клиентов, которые получают файлы из этого централизованного хранилища. Применение CVCS являлось стандартом на протяжении многих лет.&lt;/p&gt;
&lt;p&gt;Такой подход имеет множество преимуществ, особенно перед локальными VCS. Например, все разработчики проекта в определённой степени знают, чем занимается каждый из них. Администраторы имеют полный контроль над тем, кто и что может делать, и гораздо проще администрировать CVCS, чем оперировать локальными базами данных на каждом клиенте.&lt;/p&gt;
&lt;p&gt;Несмотря на это, данный подход тоже имеет серьёзные минусы. Самый очевидный минус — это единая точка отказа, представленная централизованным сервером. Если этот сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать контроль версий для сохранения изменений, над которыми работает, а также никто не сможет обмениваться этими изменениями с другими разработчиками. Если жёсткий диск, на котором хранится центральная БД, повреждён, а своевременные бэкапы отсутствуют, вы потеряете всё — всю историю проекта, не считая единичных снимков репозитория, которые сохранились на локальных машинах разработчиков. Локальные VCS страдают от той же самой проблемы: когда вся история проекта хранится в одном месте, вы рискуете потерять всё.&lt;/p&gt;
&lt;p&gt;##Распределённые системы контроля версий&lt;/p&gt;
&lt;p&gt;Здесь в игру вступают распределённые системы контроля версий (Distributed Version Control System, далее DVCS). В DVCS (таких как Git, Mercurial, Bazaar или Darcs) клиенты не просто скачивают снимок всех файлов (состояние файлов на определённый момент времени) — они полностью копируют репозиторий. В этом случае, если один из серверов, через который разработчики обменивались данными, умрёт, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы. Каждая копия репозитория является полным бэкапом всех данных.
Более того, многие DVCS могут одновременно взаимодействовать с несколькими удалёнными репозиториями, благодаря этому вы можете работать с различными группами людей, применяя различные подходы единовременно в рамках одного проекта. Это позволяет применять сразу несколько подходов в разработке, например, иерархические модели, что совершенно невозможно в централизованных системах.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
